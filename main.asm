;----------------------------------------------------------------------------------------------
;       #######################***#################%%%%%%%##
;       #############********###############################
;       ###########*******#########****#%%%%################
;       ####*##*********####******###****#%%%########***####
;       #*************##************###***+*#%##############
;       #***********###***************##***++*%%%%##########
;       #####******###**********++***#####**++*%%%%%%#######
;       #####****####*********+++++**#####**+==*%%%%%%######
;       ####*****%###*********+++++***####**+=--%@@%%%######
;       ####****%%%#*#******++++++*+**###**+==-:+@@%%%%####%
;       %%###**#%%#####******++===++***#**++==---%@%%%##%%%%
;       %%######%%#######*****++===+***#*+===-::-*%%%%####%%
;       %######%%%#######*****+++==+***#*+--==:::=%%%%%%%%%%
;       %%#####%###########***+====++*##*+-----::-@%%%%%%%%%
;       %%#####%%%###########**+++=+*####**+==---=@%%%%%%%##
;       %%####*%%########************####**+=====*@%%%%%%%##
;       %#####*%%###*=-----=**++++++**=:----:.-=-#@%%%%%%%%%
;       ########%#*:=#%%%#*+:-***+**=:*#*++++-:.::%%%%%%%%%%
;       ######*-++:%@@@%%%%#*+.**+*--##=++*###+-.+:#%%%%%%%%
;       ######*.#:#%@@@@@@@%%#=:=--.**+*%@@@%@*-*.*:%%%%%%%%
;       ######*::=%#%@@@@@@%@%%.*+=-##%@@@@%@+:-%.--#%%%%@@@
;       #######*+-%%%#%%@@@@@@%.%#+:#@@@@@%+=:-+%.%%%%%%@@@@
;       ########*.#%%%######%%==#*+:+%%%##*+--+#-*%%%%%%%@@@
;       #########*:+%%%#####*--##*+#--*###*-=*+-*%%%%%%%%%%@
;       ###########+-=*#**+--+#%#*+#%*=--::::-+%%%%%%%%%%%%%
;       ############%#*+++*###%%%**#%##+-=-=#%%%%%%%%%%%%%%%
;       %%%%%########%%%%%%%###*+**#*#+--==%@%%%%%%%%%%%%%%%
;       %%%%%%########%%%%%%###*+=*#*++-:=%%%%%%%%%%%%%@%%%%
;       %%%%%%%%#%%%%%%%%%%%##*****#*==--*@%%%%%%%%%%%%%%%%%
;       %%%%%%%%%%%%%%%%%%%%%###*###+---+@@%%%%%%@@@@@@%%%%%
;       ##%%%%%%%%%%%%%%%%%%%######*=+--@@@@%%%%@@@@@@@@@@@@
;       ##%%%%%%%%%%%%%%%%%%%###**##+--*@@@@@%%%@@@@@@@@@@@@
;       #%%%%%%%%%%%%%%%%%%%%###*+#*=-=%%%%%%%%%%@@@@@@@@@@@
;       %%%%%%%%%%%%%%%%%%%#%#**+=*+-+*%%%%%%%%%%@@@@@@@@%%%
;       %%%%%%%%%%%%%%%%%%%##%%###*-*%*%%%@@@@@@@@@@@@@@%%%%
;       %%%%%%%%%%%%%%%%%%%##%%##%#+##+%%%%%%@@@@@@@@@@%%%%%
;       %%%%%%%%%%%%%%%%%%##*#%####+#*-%%@@@%%%@@@@@@@@%%%%%
;       %%%%%%%%%%%%%%%@%%##**%%%%**#*-+%%%%%%%%@@@%@@%%%%%%
;       %%%%@@@%%%%%%%@%####*+###%**#*-=*%%%%%%%%@@@%%%@%%%%
;       %%%@@@@@@%%%%%#**#%#*+***##***-+###%%%%%%%@@@@@@@%%%
;       %%%@@@@@@%%#**+**##**+*++*#+**-=#****#%%%%@@@@@@@@%%
;       %%@@@@@%##*******#***=+++**=+*+=*#*****##%%%@@%%%%%%
;       %@@@%%#**************+++**+=*+#*###**+****#%%%%%%%%%
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
            			.cdecls C,LIST,"msp430.h","./header/kkelipCoreH.h"
;----------------------------------------------------------------------------------------------
            			.def    RESET
;----------------------------------------------------------------------------------------------
            			.text
            			.retain
            			.retainrefs
;----------------------------------------------------------------------------------------------
RESET       			mov.w    #__STACK_END,SP
StopWDT     			mov.w    #WDTPW|WDTHOLD,&WDTCTL
						mov.b    &CALBC1_16MHZ,&BCSCTL1  ; Configurando para processar o relógio interno
                    	mov.b    &CALDCO_16MHZ,&DCOCTL   ; a 16MHz
						call     #CLEAR_REGISTER
                        call	 #CLEAR_INTERNAL_RAM
                        call     #LOAD_LEDS_INPUT_RGB
                        mov.b    #001H,&QT_LED_N         ; Informa a quantidade de led que será processado
                        call     #INIT_SPI_COMM
                        call     #SS_STRP
                        ;
;----------------------------------------------------------------------------------------------
; LOOP PRINCIPAL
;----------------------------------------------------------------------------------------------
firmware               	nop
                        jmp		 firmware
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                       OPERAÇÕES BÁSICAS E DE INICIALIZAÇÃO
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
CLEAR_REGISTER
;----------------------------------------------------------------------------------------------
						mov.w    #00000H,R4
						mov.w    #00000H,R5
						mov.w    #00000H,R6
						mov.w    #00000H,R7
						mov.w    #00000H,R8
						mov.w    #00000H,R9
						mov.w    #00000H,R10
						mov.w    #00000H,R11
						mov.w    #00000H,R12
						mov.w    #00000H,R13
						mov.w    #00000H,R14
						mov.w    #00000H,R15
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
CLEAR_INTERNAL_RAM
;----------------------------------------------------------------------------------------------
                    	push.w   R4
                    	push.w   R5
                    	mov.w    #00000H,R5
                    	mov.w    #001F4H,R4
continue_clear_ram 		cmp.w    #00000H,R4
                    	jeq      end_clear_ram
                    	mov.b    #0FFH,0200H(R5)
                    	inc.w    R5
                    	dec.w    R4
                    	jmp      continue_clear_ram
end_clear_ram      		pop.w    R5
                    	pop.w    R4
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
APINIT_FLASH_MSP430G2553 ; Tem como funcionalidade apagar todo o espaço disponível da Flash de
                         ; Informação ou Inicializar. A inicialização significa que o mcu foi
                         ; ligado e os primeiros dois bytes deverão conter o valor de 0ABBA que
                         ; indica que o sistema já foi inicializado. O valor de byte apagado
                         ; deverá ser FF para todas as posições de memória. O valor 0FF é
                         ; default
;----------------------------------------------------------------------------------------------
						push.w   R4
						push.w   R5
						push.w   R6
						mov.w    &INFO_FLASH_POS_INI,R6
						cmp.w    #FLASH_NOT_INI,R6
						jeq      init_flash_data    ; Se R6 estiver com o valor 0FFFF. Será necessário inicializar a flash
						cmp.w    #FLASH_INI_LOCK,R6
						jeq      end_apinit_flash
init_flash_data         mov.w    #01000H,&POS_WRITE_INI_DATA_BYTE_MEM ; Informa a posição inicial de escrita na memória flash de informação
                        mov.w    #01001H,&POS_WRITE_FIN_DATA_BYTE_MEM ; Informa a posição fina de escrita na memória flash de informação
                        mov.w    #__POS_INI_AREA_A_SRAM_MEM__,&POS_AREA_AB_SRAM_MEM ; Defini qual bloco o processamento irá ocorrer
                        call     #CALCULE_SRAM_LEN_OPERATOR ; Calcula quantos bytes de processamento deverá ser tratado na operação
                        mov.w    #F_CTRL_OP_MEM_RFLASH,&CTRL_OP_MEM ; Informa ao controlador de operação de memória. Que a operação será da sram interna para flash de informação
						call     #INIT_INFO_FLASH_0ABBA
flash_init_ok			mov.w    #INFO_FLASH_POS_OPER_REF,R4
						mov.w    #INFO_FLASH_LEN_DATA,R5
loop_apagar_flash	  	call     #ERASE_INFO_FLASH
                    	inc.w    R4
                    	dec.w    R5
                    	jz       end_l_apagar
                    	jmp      loop_apagar_flash
end_l_apagar	        nop
end_apagar_flash	   	nop
end_apinit_flash        pop.w    R6
                        pop.w    R5
						pop.w    R4
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
INIT_INFO_FLASH_0ABBA
;----------------------------------------------------------------------------------------------
                    	push.w   R4
                    	mov.w    #__POS_INI_AREA_A_SRAM_MEM__,R4
                    	mov.b    #0BAH,0(R4)
                    	mov.b    #0ABH,1(R4)
                    	call     #EXEC_OPER_WRITE_READ
                    	pop.w    R4
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
ERASE_INFO_FLASH
;----------------------------------------------------------------------------------------------
                    	mov.w    #FWKEY+FSSEL0+FN1,&FCTL2
                    	mov.w    #FWKEY+WRT,&FCTL1
                    	mov.w    #FWKEY,&FCTL3
                    	mov.b    #0FFH,0(R4)
                    	mov.w    #FWKEY,&FCTL1
                    	mov.w    #FWKEY+LOCK,&FCTL3
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
ERASE_AREA_A_SRAM
;----------------------------------------------------------------------------------------------
						mov.w    #__AREA_A_64_BYTES_SRAM_MEM__,&LEN_AREA_AB_SRAM_MEM
						mov.w    #__POS_INI_AREA_A_SRAM_MEM__,&POS_AREA_AB_SRAM_MEM
						call     #ERASE_AREA_AB_SRAM
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
ERASE_AREA_B_SRAM
;----------------------------------------------------------------------------------------------
						mov.w    #__AREA_B_64_BYTES_SRAM_MEM__,&LEN_AREA_AB_SRAM_MEM
						mov.w    #__POS_INI_AREA_B_SRAM_MEM__,&POS_AREA_AB_SRAM_MEM
						call     #ERASE_AREA_AB_SRAM
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
ERASE_AREA_AB_SRAM
;----------------------------------------------------------------------------------------------
                    	push.w   R4
                    	push.w   R5
						mov.w    &POS_AREA_AB_SRAM_MEM,R5
						mov.w    &LEN_AREA_AB_SRAM_MEM,R4
c_erase_area_ab_sram	cmp.w    #00000H,R4
						jeq      fin_erase_area_ab_sram
						mov.b    #00AH,0(R5)
						inc.w    R5
						dec.w    R4
						jmp		 c_erase_area_ab_sram
fin_erase_area_ab_sram  pop.w    R5
                    	pop.w    R4
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
INPUT_INFO_FLASH
;----------------------------------------------------------------------------------------------
                    	mov.w    #FWKEY+FSSEL0+FN1,&FCTL2
                    	mov.w    #FWKEY+WRT,&FCTL1
                    	mov.w    #FWKEY,&FCTL3
                    	mov.b    R8,0(R6)
                    	mov.w    #FWKEY,&FCTL1
                    	mov.w    #FWKEY+LOCK,&FCTL3
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
CALCULE_SRAM_LEN_OPERATOR
;----------------------------------------------------------------------------------------------
                    	push.w   R4
						push.w   R5
						mov.w    &POS_WRITE_FIN_DATA_BYTE_MEM,R4 ; Processo de operação da ram para flash
                        mov.w    &POS_WRITE_INI_DATA_BYTE_MEM,R5
                        sub.w    R5,R4
                        inc.w    R4
                        mov.w    R4,&LEN_AREA_AB_SRAM_MEM
						pop.w    R5
						pop.w    R4
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
EXEC_OPER_WRITE_READ   ; Toda a operação de leitura e escrita deversá ser gerenciado por essa
                       ; rotina
;----------------------------------------------------------------------------------------------
						push.w   R4
						push.w   R5
						push.w   R6
						push.w   R7
						push.w   R8
						cmp.w    #F_CTRL_OP_MEM_RFLASH,&CTRL_OP_MEM
						jeq      ram_to_flash
						nop
;##############################################################################################
ram_to_flash			mov.w    #__POS_INI_AREA_A_SRAM_MEM__,R7
                        mov.w    #00000H,R8
                        mov.w    &POS_WRITE_INI_DATA_BYTE_MEM,R6
                        mov.w    &LEN_AREA_AB_SRAM_MEM,R4
ctl_ram_to_flash        cmp.w    #00000H,R4
        				jeq      fin_ram_to_flash
        				mov.b    0(R7),R8
        				call     #INPUT_INFO_FLASH
        				inc.w    R7
						inc.w    R6
						dec.w    R4
                        jmp		 ctl_ram_to_flash
fin_ram_to_flash        nop
;##############################################################################################
                    	pop.w    R8
                    	pop.w    R7
                    	pop.w    R6
                    	pop.w    R5
                    	pop.w    R4
                    	ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
INIT_SPI_COMM
;----------------------------------------------------------------------------------------------
						bis.b    #080H,&P1SEL
						bis.b    #080H,&P1SEL2
						bis.b    #0A9H,&UCB0CTL0
						bis.b    #080H,&UCB0CTL1
						mov.b    #003H,&UCB0BR0
						clr.b    &UCB0BR1
						bic.b    #001H,&UCB0CTL1
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	FIM OPERAÇÕES BÁSICAS E DE INICIALIZAÇÃO
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	    OPERAÇÕES DE PERSISTÊNCIA
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
LOAD_LEDS_INPUT_RGB
;----------------------------------------------------------------------------------------------
						push.w   R4
						push.w   R5
						push.w   R6
						mov.w    #0000CH,R4
						mov.w    #CTRL_LED_I_COLOR_RED,R5
						mov.w    #LED_CC_COLOR_DEFAULT,R6
ct_load_in_rgb          cmp.w    #00000H,R4
                        jeq      f_load_in_rgb
                        mov.b    @R6+,0(R5)
                        inc.w    R5
                        dec.w    R4
                        jmp      ct_load_in_rgb
f_load_in_rgb           nop
                        pop.w    R6
						pop.w    R5
						pop.w    R4
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	   FIM OPERAÇÕES DE PERSISTÊNCIA
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	    OPERAÇÕES DE TEMPO
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
HOLD_ON_800_CYCLES ; Bloqueia o processamento da máquina por 800 ciclos
;----------------------------------------------------------------------------------------------
						push.w   R15
						mov.w    #00109H,R15
ct_ho800				add.w    #0FFFFH,R15
						jc       ct_ho800
						pop.w    R15
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	   FIM OPERAÇÕES DE TEMPO
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	    OPERAÇÕES DO LED RGB
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
SS_STRP ; Show Strip
;----------------------------------------------------------------------------------------------
						push.w   R4
						push.w   R5
						push.w   R6
						push.w   R14
						push.w   R15
						mov.w    #00000H,R4
						mov.w    #CTRL_LED_I_COLOR_RED,R6
						mov.w    #00000H,R14
						mov.w    #00000H,R15
						mov.b    &QT_LED_N,R4
;===============================================================================================
ct_cled_pr              cmp.b    #000H,R4
                        jeq      fin_cled_pr
                        mov.w    #00003H,R5
;###############################################################################################
ct_ccolor_iter          cmp.w    #00000H,R5
                        jeq      fin_color_iter
                        mov.b    0(R6),R15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
						mov.b    #080H,R14
bit_rr_r                cmp.b    #000H,R14
                       	jeq      bit_rr_0_ok
hold_on_spi_comm		bit.b    #008H,&IFG2
						jnc      hold_on_spi_comm
						nop
						bit.b    R14,R15
						jeq      bit_rr_off
						mov.b    #HIGH_CODE_WS2812,&UCB0TXBUF ; APLICAR COMUNICAÇÃO SPI
						jmp      exec_rr
bit_rr_off              mov.b    #LOW_CODE_WS2812,&UCB0TXBUF ; APLICAR COMUNICAÇÃO SPI
exec_rr					bic.b    #1,SR
						rrc.b    R14
						jmp      bit_rr_r
bit_rr_0_ok             nop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        dec.w    R5
                        inc.w    R6
                        jmp      ct_ccolor_iter
fin_color_iter          nop
;###############################################################################################
                        dec.b    R4
                        jmp      ct_cled_pr
fin_cled_pr             call     #HOLD_ON_800_CYCLES
;==============================================================================================
						pop.w    R15
						pop.w    R14
						pop.w    R6
						pop.w    R5
						pop.w    R4
						ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                	   FIM OPERAÇÕES DO LED RGB
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
;                                  DADOS FIXOS
;----------------------------------------------------------------------------------------------
;                                |G    |R   |B
;----------------------------------------------------------------------------------------------
LED_CC_COLOR_DEFAULT    .byte    080H, 000H, 000H  ; Verde
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
; Stack Pointer definition
;----------------------------------------------------------------------------------------------
            			.global  __STACK_END
            			.sect    .stack
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
; Interrupt Vectors
;----------------------------------------------------------------------------------------------
            			.sect    ".reset"
            			.short   RESET
;----------------------------------------------------------------------------------------------
